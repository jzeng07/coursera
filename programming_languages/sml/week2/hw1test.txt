(* Homework1 Simple Test *)
(* These are basic test cases. Passing these tests does not guarantee that your code will pass the actual homework grader *)
(* To run the test, add a new line to the top of this file: use "homeworkname.sml"; *)
(* All the tests should evaluate to true. For example, the REPL should say: val test1 = true : bool *)


val test1 = is_older ((1,2,3),(2,3,4)) = true
val test1_1 = is_older ((3,2,1),(1,2,3)) = false
val test1_2 = is_older ((1,2,3),(1,3,2)) = true
val test1_3 = is_older ((1,2,3),(1,2,4)) = true
val test1_4 = is_older ((2,2,3),(1,3,4)) = false
val test1_5 = is_older ((2,3,3),(2,2,4)) = false
val test1_6 = is_older ((1971,7,1),(1970,9,2)) = false
val test1_7 = is_older ((1971,7,1),(2002,1,7)) = true

val test2 = number_in_month ([],2) = 0
val test2_1 = number_in_month ([(2012,2,28),(2013,12,1)],2) = 1
val test2_2 = number_in_month ([(2012,4,28),(2013,12,1)],2) = 0
val test2_3 = number_in_month ([(2012,2,28),(2013,2,1)],2) = 2
val test2_4 = number_in_month ([(2012,3,28),(2013,12,1),(1,12,3)],12) = 2
val test2_5 = number_in_month ([(2012,3,28),(2013,12,1),(1,3,3)],3) = 2
val test2_6 = number_in_month ([(2012,4,28),(2013,5,1),(1,6,3)],7) = 0

val test3 = number_in_months ([],[2,3,4]) = 0
val test3_1 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[]) = 0
val test3_2 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4]) = 3
val test3_3 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4,12]) = 4
val test3_4 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4,5]) = 3
val test3_5 = number_in_months ([(2012,2,28),(2013,2,1),(2011,2,31),(2011,2,28)],[2,3,4]) = 4
val test3_6 = number_in_months ([(2012,2,28),(2013,2,1),(2011,2,31),(2011,2,28)],[3,4]) = 0
val test3_7 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[4,3,2]) = 3
val test3_8 = number_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[4,4,4]) = 3

val test4 = dates_in_month ([],2) = []
val test4_1 = dates_in_month ([(2012,2,28),(2013,12,1)],2) = [(2012,2,28)]
val test4_2 = dates_in_month ([(2012,2,28),(2013,2,1)],2) = [(2012,2,28),(2013,2,1)]
val test4_3 = dates_in_month ([(2012,12,28),(2013,12,1)],2) = []
val test4_4 = dates_in_month ([(2012,2,28),(2013,12,1)],5) = []
val test4_5 = dates_in_month ([(2012,2,28),(2013,6,1)],6) = [(2013,6,1)]

val test5 = dates_in_months ([],[2,3,4]) = []
val test5_1 = dates_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[]) = []
val test5_2 = dates_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4]) = [(2012,2,28),(2011,3,31),(2011,4,28)]
val test5_3 = dates_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4,12]) = [(2012,2,28),(2011,3,31),(2011,4,28),(2013,12,1)]
val test5_4 = dates_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[1,5,6]) = []
val test5_5 = dates_in_months ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[1,2,3]) = [(2012,2,28),(2011,3,31)]

val test6_3 = get_nth (["hi", "there", "how", "are", "you"], 2) = "there"
val test6_4 = get_nth (["hi", "there", "how", "are", "you"], 1) = "hi"
val test6_5 = get_nth (["hi", "there", "how", "are", "you"], 5) = "you"

val test7 = date_to_string (2013, 6, 1) = "June 1, 2013"
val test7_1 = date_to_string (2015, 8, 1) = "August 1, 2015"
val test7_2 = date_to_string (1, 12, 25) = "December 25, 1"
val test7_4 = date_to_string (2013, 1, 1) = "January 1, 2013"
val test7_5 = date_to_string (2013, 2, 28) = "February 28, 2013"
val test7_6 = date_to_string (2013, 3, 2) = "March 2, 2013"
val test7_7 = date_to_string (2014, 4, 1) = "April 1, 2014"
val test7_8 = date_to_string (2015, 5, 10) = "May 10, 2015"
val test7_9 = date_to_string (2016, 7, 20) = "July 20, 2016"
val test7_10 = date_to_string (2017, 9, 21) = "September 21, 2017"
val test7_11 = date_to_string (2017, 10, 14) = "October 14, 2017"
val test7_12 = date_to_string (2017, 11, 28) = "November 28, 2017"

val test8 = number_before_reaching_sum (10, [1,2,3,4,5]) = 3
val test8_1 = number_before_reaching_sum (1, [1,2,3,4,5]) = 0
val test8_2 = number_before_reaching_sum (1, [2,3,4,5]) = 0
val test8_3 = number_before_reaching_sum (15, [1,2,3,4,5]) = 4

val test9 = what_month 70 = 3
val test9_1 = what_month 31 = 1
val test9_2 = what_month 121 = 5
val test9_3 = what_month 182 = 7
val test9_4 = what_month 181 = 6
val test9_5 = what_month 1 = 1
val test9_6 = what_month 365 = 12

val test10 = month_range (31, 34) = [1,2,2,2]
val test10_1 = month_range (179, 185) = [6,6,6,7,7,7,7]
val test10_2 = month_range (360,365) = [12,12,12,12,12,12]
val test10_3 = month_range (31, 34) = [1,2,2,2]
val test10_4 = month_range (5, 3) = []

val test11 = oldest([(2012,2,28),(2011,3,31),(2011,4,28)]) = SOME (2011,3,31)
val test11_1 = oldest([(2011,2,28),(2011,3,31),(2011,4,28)]) = SOME (2011,2,28)
val test11_2 = oldest([(2011,2,28),(2011,2,20),(2011,2,2)]) = SOME (2011,2,2)
val test11_3 = oldest([(2017,2,28),(2018,3,31),(2019,4,28)]) = SOME (2017,2,28)
val test11_4 = oldest([(1971,7,1),(1970,9,2),(2002,1,7)]) = SOME (1970,9,2)
val test11_5 = oldest([(1971,7,1),(1970,9,2),(2002,1,7),(1971,5,15),(1972,12,16)]) = SOME (1970,9,2)


val test12 = number_in_months_challenge ([],[2,3,4]) = 0
val test12_1 = number_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[]) = 0
val test12_2 = number_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4,4,3,2]) = 3
val test12_3 = number_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4,12,2,3,4,5,6,12]) = 4
val test12_4 = number_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4,5,1,2,3,4,5,6,2,3,4]) = 3
val test12_5 = number_in_months_challenge ([(2012,2,28),(2013,2,1),(2011,2,31),(2011,2,28)],[2,3,4,1,2,3,4,5,3,2,1]) = 4
val test12_6 = number_in_months_challenge ([(2012,2,28),(2013,2,1),(2011,2,31),(2011,2,28)],[3,4,4,4,4,4,3,3,3,3,4,3,4,3,4]) = 0
val test12_7 = number_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[4,3,2,2,2,4,4,5,5,3,3]) = 3
val test12_8 = number_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[4,4,4,4,4]) = 1

val test13 = dates_in_months_challenge ([],[2,3,4]) = []
val test13_1 = dates_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[]) = []
val test13_2 = dates_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4,2,3,4,2,3,4]) = [(2012,2,28),(2011,3,31),(2011,4,28)]
val test13_3 = dates_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[2,3,4,12,12,2,3,4,2,3,4,12]) = [(2012,2,28),(2011,3,31),(2011,4,28),(2013,12,1)]
val test13_4 = dates_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[1,5,6,6,5,1]) = []
val test13_5 = dates_in_months_challenge ([(2012,2,28),(2013,12,1),(2011,3,31),(2011,4,28)],[1,2,3,3,2,1,2,3,2,1,2,3]) = [(2012,2,28),(2011,3,31)]



val test14 = reasonable_date((2012,2,28)) = true
val test14_1 = reasonable_date((2012,2,29)) = true
val test14_2 = reasonable_date((100,2,29)) = false
val test14_3 = reasonable_date((2000,2,29)) = true
val test14_4 = reasonable_date((2011,2,29)) = false
val test14_5 = reasonable_date((0,2,29)) = false
val test14_6 = reasonable_date((1,0,29)) = false
val test14_7 = reasonable_date((1,1,31)) = true
val test14_8 = reasonable_date((1,13,31)) = false
val test14_9 = reasonable_date((1,12,31)) = true
val test14_10 = reasonable_date((1,12,32)) = false
val test14_11 = reasonable_date((1,6,31)) = false
val test14_12 = reasonable_date((1,4,31)) = false
val test14_13 = reasonable_date((1,9,31)) = false
val test14_14 = reasonable_date((1,11,31)) = false
val test14_15 = reasonable_date((1,7,31)) = true
val test14_16 = reasonable_date((1,8,31)) = true
val test14_17 = reasonable_date((1971,7,1)) = true


