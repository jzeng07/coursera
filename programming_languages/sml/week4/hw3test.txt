(* Homework3 Simple Test*)
(* These are basic test cases. Passing these tests does not guarantee that your code will pass the actual homework grader *)
(* To run the test, add a new line to the top of this file: use "homeworkname.sml"; *)
(* All the tests should evaluate to true. For example, the REPL should say: val test1 = true : bool *)

val test1 = only_capitals ["A","B","C"] = ["A","B","C"]
val test1_1 = only_capitals ["Lanying","Jun","Lucy", "hello", "world"] = ["Lanying","Jun","Lucy"]
val test1_2 = only_capitals ["aA","Bb","cCc"] = ["Bb"]

val test2 = longest_string1 ["A","bc","C"] = "bc"
val test2_1 = longest_string1 ["hello","this","is", "a", "world"] = "hello"
val test2_2 = longest_string1 ["what","a","wonderful", "day", "abcdefghi"] = "wonderful"

val test3 = longest_string2 ["A","bc","C"] = "bc"
val test3_1 = longest_string2 ["hello","this","is", "a", "world"] = "world"
val test3_2 = longest_string2 ["what","a","wonderful", "day", "abcdefghi"] = "abcdefghi"

val test4a = longest_string3 ["A","bc","C"] = "bc"
val test4_a1 = longest_string3 ["hello","this","is", "a", "world"] = "hello"
val test4_a2 = longest_string3 ["what","a","wonderful", "day", "abcdefghi"] = "wonderful"

val test4b = longest_string4 ["A","B","C"] = "C"
val test4_b1 = longest_string4 ["hello","this","is", "a", "world"] = "world"
val test4_b2 = longest_string4 ["what","a","wonderful", "day", "abcdefghi"] = "abcdefghi"

val test5 = longest_capitalized ["A","bc","C"] = "A"
val test5_1 = longest_capitalized ["hello","This","Is", "a", "world"] = "This"
val test5_2 = longest_capitalized ["what","a","Wonderful", "Day", "Abcdefghi"] = "Wonderful"

val test6 = rev_string "abc" = "cba"
val test6_1 = rev_string "Hello" = "olleH"
val test6_2 = rev_string "LanYing" = "gniYnaL"

val test7 = first_answer (fn x => if x > 3 then SOME x else NONE) [1,2,3,4,5] = 4
val test7_1 = first_answer (fn x => if x < 5 then SOME x else NONE) [1,2,3,4,5] = 1
val test7_2 = first_answer (fn x => if x = 3 then SOME x else NONE) [1,2,3,4,5] = 3
val test7_4 = first_answer (fn x => if String.sub(x, 0) = #"h" then SOME x else NONE) ["abc", "def", "hgik"] = "hgik"

val test8 = all_answers (fn x => if x = 1 then SOME [x] else NONE) [2,3,4,5,6,7] = NONE
val test8_1 = all_answers (fn x => if x = 2 then SOME [x] else NONE) [2,3,4,5,6,7] = NONE
val test8_2 = all_answers (fn x => if x > 1 then SOME [x] else NONE) [2,3,4,5,6,7] = SOME [2,3,4,5,6,7]

val test8_3 = all_answers (fn x => if x < 5 then SOME [x] else NONE) [2,3,4,5,6,7] = NONE

val test8_4 = all_answers (fn x => if String.sub(x, 0) = #"h" then SOME [x] else NONE) ["hello", "hi", "handle"] = SOME ["hello", "hi", "handle"]

val test8_5 = all_answers (fn x => if String.sub(x, 0) = #"h" then SOME [x] else NONE) ["hello", "world", "hi", "handle", "Hi"] = NONE
val test8_6 = all_answers (fn x => if String.sub(x, 0) = #"h" then SOME [x] else NONE) [] = SOME []

val test9a = count_wildcards Wildcard = 1
val test9a_1 = count_wildcards (TupleP [Wildcard, Wildcard, Variable("hello")]) = 2
val test9a_2 = count_wildcards (TupleP [Wildcard, Wildcard, Variable("hello"), TupleP [Wildcard, Variable("hello"), Wildcard]]) = 4

val test9b = count_wild_and_variable_lengths (Variable("a")) = 1
val test9b_1 = count_wild_and_variable_lengths (TupleP [Wildcard, Wildcard, Variable("hello")]) = 7
val test9b_2 = count_wild_and_variable_lengths (TupleP [Wildcard, Variable("hello"), Wildcard, Variable("world")]) = 12

val test9c = count_some_var ("x", Variable("x")) = 1
val test9c_1 = count_some_var ("x", TupleP [Variable("x"), Wildcard, ConstP 8, Variable("x"), Variable("abc")]) = 2
val test9c_2 = count_some_var ("abc", TupleP [Variable("x"), Wildcard, ConstP 8, Variable("x"), Variable("abc")]) = 1
val test9c_3 = count_some_var ("abcd", TupleP [Variable("x"), Wildcard, ConstP 8, Variable("x"), Variable("abc")]) = 0

val test10 = check_pat (Variable("x")) = true
val test10_1 = check_pat (TupleP [Variable("x"), Variable("x")]) = false
val test10_2 = check_pat (ConstructorP ("egg",ConstructorP ("egg",ConstP 4))) = true
val test10_3 = check_pat (TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4))]) = true

val test10_4 = check_pat (TupleP[Wildcard,Wildcard]) = true
val test10_5 = check_pat (TupleP[ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstP 4)]) = true
val test10_6 = check_pat (TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4)),TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4))],TupleP[Wildcard,Wildcard],TupleP[ConstP 17,ConstP 4],TupleP[ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstP 4)]]) = true

val test11 = match (Const(1), UnitP) = NONE
val test11_1 = match (Tuple[Const 17,Unit,Const 4],TupleP[ConstP 17,Wildcard,ConstP 4]) = SOME []
val test11_2 = match (Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4)],TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4)]) = SOME []

val test11_3 = match (Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4),Constructor ("egg",Constructor ("egg",Const 4))],TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4))]) = SOME []

val test11_4 = match (Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4),Constructor ("egg",Constructor ("egg",Const 4)),Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4),Constructor ("egg",Constructor ("egg",Const 4))],Tuple[Unit,Unit],Tuple[Const 17,Const 4],Tuple[Constructor ("egg",Const 4),Constructor ("egg",Const 4)]],TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4)),TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4))],TupleP[Wildcard,Wildcard],TupleP[ConstP 17,ConstP 4],TupleP[ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstP 4)]]) = SOME []

val test12 = first_match Unit [UnitP] = SOME []
val test12_0 = first_match (Tuple[Unit]) [TupleP[Variable("x")]] = SOME [("x",Unit)]
val test12_1 = first_match (Tuple[Const 17, Unit]) [TupleP[ConstP 17, Wildcard]] = SOME []
val test12_2 = first_match (Tuple[Const 17, Unit, Const 4, Constructor("egg", Const 4)]) [TupleP[ConstP 17, Wildcard, ConstP 4]] = SOME []
val test12_3 = first_match (Tuple[Const 17, Unit, Const 4, Constructor("egg", Const 4)]) [TupleP[ConstP 17, Wildcard, ConstP 4]] = SOME []
val test12_4 = first_match (Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4)]) [TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4)]] = SOME []

