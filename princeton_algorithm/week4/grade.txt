See the Assessment Guide for information on how to interpret this report.

Assessment Summary

Compilation:  PASSED
Style:        FAILED
Findbugs:     Potential bugs found.
API:          PASSED

Correctness:  35/42 tests passed
Memory:       8/8 tests passed
Timing:       0/17 tests passed

Aggregate score: 64.17% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
total 20K
-rw-r--r-- 1 5.5K Oct 27 21:02 Board.java
-rw-r--r-- 1 5.1K Oct 27 21:02 Solver.java
-rw-r--r-- 1 3.1K Oct 27 21:02 studentSubmission.zip


********************************************************************************
*          COMPILING                                                           *
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

================================================================

% javac Solver.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
[ERROR] Board.java:9:18: The instance variable 'N' must start with a lowercase letter and use camelCase. [MemberName]
[ERROR] Board.java:12:18: The instance variable 'zero_idx' must start with a lowercase letter and use camelCase. [MemberName]
[ERROR] Board.java:18:19: Typecast is not followed by whitespace. [WhitespaceAfter]
[ERROR] Board.java:24:38: Typecast is not followed by whitespace. [WhitespaceAfter]
[ERROR] Board.java:41:21: Typecast is not followed by whitespace. [WhitespaceAfter]
[ERROR] Board.java:46:21: Typecast is not followed by whitespace. [WhitespaceAfter]
[ERROR] Board.java:51:21: Typecast is not followed by whitespace. [WhitespaceAfter]
[ERROR] Board.java:86:29: Typecast is not followed by whitespace. [WhitespaceAfter]
[ERROR] Board.java:95:31: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
[ERROR] Board.java:104:13: The local variable 'zero_i' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] Board.java:105:13: The local variable 'zero_j' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] Board.java:137:43: Typecast is not followed by whitespace. [WhitespaceAfter]
[ERROR] Board.java:163:15: The local variable 'twin_board' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] Solver.java:7:21: The instance variable '_isSolvable' must start with a lowercase letter and use camelCase. [MemberName]
[ERROR] Solver.java:9:31: The instance variable 'twin_pq' must start with a lowercase letter and use camelCase. [MemberName]
[ERROR] Solver.java:10:17: The instance variable '_moves' must start with a lowercase letter and use camelCase. [MemberName]
[ERROR] Solver.java:11:24: The instance variable 'cur_sn' must start with a lowercase letter and use camelCase. [MemberName]
[ERROR] Solver.java:12:24: The instance variable 'twin_cur_sn' must start with a lowercase letter and use camelCase. [MemberName]
[ERROR] Solver.java:13:26: The instance variable '_solution' must start with a lowercase letter and use camelCase. [MemberName]
[ERROR] Solver.java:16:23: The instance variable '_board' must start with a lowercase letter and use camelCase. [MemberName]
[ERROR] Solver.java:17:28: The instance variable '_pre_sn' must start with a lowercase letter and use camelCase. [MemberName]
[ERROR] Solver.java:18:9: Variable definition out of order. The preferred order is [public, protected, package, and private]. [DeclarationOrder]
[ERROR] Solver.java:18:20: The instance (or static) variable 'moves' must be private. [VisibilityModifier]
[ERROR] Solver.java:19:9: Variable definition out of order. The preferred order is [public, protected, package, and private]. [DeclarationOrder]
[ERROR] Solver.java:19:20: The instance (or static) variable 'priority' must be private. [VisibilityModifier]
[ERROR] Solver.java:21:51: The parameter variable 'pre_sn' must start with a lowercase letter and use camelCase. [ParameterName]
[ERROR] Solver.java:25:15: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[ERROR] Solver.java:30:15: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[ERROR] Solver.java:48:15: The local variable 'twin_board' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] Solver.java:53:20: The local variable 'twin_sn' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] Solver.java:74:15: The local variable 'twin_board' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] Solver.java:84:32: The local variable 'sn_neighbor' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] Solver.java:89:29: The local variable 'twin_neighbors' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] Solver.java:90:24: The local variable 'twin_neighbor' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] Solver.java:92:32: The local variable 'twin_sn_neighbor' must start with a lowercase letter and use camelCase. [LocalVariableName]
[ERROR] Solver.java:96:15: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
Checkstyle ends with 36 errors.

================================================================


% findbugs *.class
*-----------------------------------------------------------
M D URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD UrF: Unread public/protected field: Solver$SearchNode.moves  At Solver.java:[line 24]
Warnings generated: 1

================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*          CORRECTNESS
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 1b: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
==> passed

Test 2a: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 2b: Test manhattan() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
     -  student   manhattan() = 46681
     -  reference manhattan() = 1357401
     -  Failed on trial 1 of 10

==> FAILED

Test 3: Test dimension() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==> passed

Test 4a: Test toString() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 4b: Test toString() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
==> passed

Test 5a: Test neighbors() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 5b: Test neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
  *  127-by-127
==> passed

Test 6a: Test neighbors() of neigbors() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 6b: Test neighbors() of neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==> passed

Test 7a: Test twin() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==> passed

Test 7b: Test twin() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==> passed

Test 8a: Test isGoal() on file inputs
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-00.txt
  *  puzzle4x4-00.txt
==> passed

Test 8b: Test isGoal() on N-by-N goal boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  6-by-6
  *  100-by-100
==> passed

Test 9: Check whether two Board objects can be created at the same time
  *   random 3-by-3 and 3-by-3 boards
  *   random 4-by-4 and 4-by-4 boards
  *   random 2-by-2 and 2-by-2 boards
  *   random 3-by-3 and 4-by-4 boards
  *   random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: Check equals()
  *  reflexive
  *  symmetric
  *  checks that individual entries of array are equal
  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==> passed

Test 10b: Test equals() on M-by-M vs. N-by-N goal boards
  *  M = 2, N = 2
  *  M = 3, N = 3
  *  M = 4, N = 4
  *  M = 2, N = 5
  *  M = 5, N = 2
==> passed

Test 11: Check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle10.txt
  *  puzzle20.txt
  *  puzzle30.txt
  *  2-by-2
  *  3-by-3
  *  4-by-4
==> passed

Test 13: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 21/22 tests passed!


================================================================

******************************************************************************
*          correctness (substituting reference Board.java)
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 20 total tests.

Test 1: Call moves() with file inputs
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
     -  moves() returns wrong value
     -  student   moves() = 75
     -  reference moves() = 11
     -  board =
        3
         1  0  2 
         7  5  4 
         8  6  3 
  *  puzzle12.txt
     -  moves() returns wrong value
     -  student   moves() = 24
     -  reference moves() = 12
     -  board =
        5
         1  2  3  4  5 
        12  6  8  9 10 
         0  7 13 19 14 
        11 16 17 18 15 
        21 22 23 24 20 
  *  puzzle13.txt
==> FAILED

Test 2: Call solution() with file inputs
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==> passed

Test 3: Create two Solver objects at the same time
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==> passed

Test 4a: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 4b: Call isSolvable() on random N-by-N puzzles
  *  100 random 2-by-2 boards
==> passed

Test 5: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 6: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==> passed

Test 7a: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle3x3-00.txt
  *  puzzle3x3-01.txt
  *  puzzle3x3-05.txt
  *  puzzle3x3-10.txt
  *  random 2-by-2 solvable boards
==> passed

Test 7b: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
  *  random 2-by-2 unsolvable boards
==> passed

Test 8: Call moves() with more file inputs
  *  puzzle14.txt
     -  moves() returns wrong value
     -  student   moves() = 92
     -  reference moves() = 14
     -  board =
        7
         1  2  3  4  5  7 14 
         8  9 10 11 12 13  6 
        15 16 17 18 19 20 21 
        22 23 24 25 26 27 28 
        29 30 31 32  0 33 34 
        36 37 38 39 40 41 35 
        43 44 45 46 47 48 42 
  *  puzzle15.txt
  *  puzzle16.txt
     -  moves() returns wrong value
     -  student   moves() = 60
     -  reference moves() = 16
     -  board =
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 47 37 39 40 
        41 42 43 44 45 46  0 38 49 50 
        51 52 53 54 55 56 57 48 59 60 
        61 62 63 64 65 66 67 58 69 80 
        71 72 73 74 75 76 77 68 70 78 
        81 82 83 84 85 86 87 88 79 89 
        91 92 93 94 95 96 97 98 99 90 
  *  puzzle17.txt
     -  moves() returns wrong value
     -  student   moves() = 37
     -  reference moves() = 17
     -  board =
        3
         5  1  8 
         2  7  3 
         4  0  6 
  *  puzzle18.txt
     -  moves() returns wrong value
     -  student   moves() = 64
     -  reference moves() = 18
     -  board =
        3
         5  6  2 
         1  8  4 
         7  3  0 
  *  puzzle19.txt
     -  moves() returns wrong value
     -  student   moves() = 57
     -  reference moves() = 19
     -  board =
        3
         1  2  7 
         0  4  3 
         6  5  8 
  *  puzzle20.txt
     -  moves() returns wrong value
     -  student   moves() = 76
     -  reference moves() = 20
     -  board =
        3
         1  6  4 
         7  0  8 
         2  3  5 
  *  puzzle21.txt
     -  moves() returns wrong value
     -  student   moves() = 63
     -  reference moves() = 21
     -  board =
        3
         5  2  3 
         4  7  0 
         8  6  1 
  *  puzzle22.txt
     -  moves() returns wrong value
     -  student   moves() = 64
     -  reference moves() = 22
     -  board =
        3
         4  8  2 
         3  6  5 
         1  7  0 
  *  puzzle23.txt
     -  moves() returns wrong value
     -  student   moves() = 89
     -  reference moves() = 23
     -  board =
        3
         5  0  4 
         2  3  8 
         7  1  6 
  *  puzzle24.txt
     -  moves() returns wrong value
     -  student   moves() = 58
     -  reference moves() = 24
     -  board =
        3
         5  7  4 
         3  0  8 
         1  6  2 
  *  puzzle25.txt
     -  moves() returns wrong value
     -  student   moves() = 51
     -  reference moves() = 25
     -  board =
        3
         2  8  5 
         3  6  1 
         7  0  4 
  *  puzzle26.txt
     -  moves() returns wrong value
     -  student   moves() = 122
     -  reference moves() = 26
     -  board =
        3
         5  7  0 
         3  2  8 
         1  6  4 
  *  puzzle27.txt
     -  moves() returns wrong value
     -  student   moves() = 83
     -  reference moves() = 27
     -  board =
        3
         5  8  7 
         1  4  6 
         3  0  2 
  *  puzzle28.txt
     -  moves() returns wrong value
     -  student   moves() = 78
     -  reference moves() = 28
     -  board =
        3
         7  8  5 
         4  0  2 
         3  6  1 
  *  puzzle29.txt
     -  moves() returns wrong value
     -  student   moves() = 51
     -  reference moves() = 29
     -  board =
        3
         6  0  5 
         8  7  4 
         3  2  1 
  *  puzzle30.txt
     -  moves() returns wrong value
     -  student   moves() = 100
     -  reference moves() = 30
     -  board =
        3
         8  4  7 
         1  5  6 
         3  2  0 
  *  puzzle31.txt
     -  moves() returns wrong value
     -  student   moves() = 47
     -  reference moves() = 31
     -  board =
        3
         8  6  7 
         2  5  4 
         3  0  1 
==> FAILED

Test 9: Check whether equals() method in Board is called
        with an argument of the wrong type
  *  puzzle00.txt
  *  puzzle05.txt
  *  puzzle10.txt
  *  puzzle15.txt
==> passed

Test 10: Check that constructor throws exception if board is null
==> passed

Test 11: Check for fragile dependence on toString()
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle08.txt
  *  puzzle12.txt
==> passed

Test 12a: Call moves() with 2-by-2 file inputs
  *  puzzle2x2-00.txt
  *  puzzle2x2-01.txt
  *  puzzle2x2-02.txt
  *  puzzle2x2-03.txt
  *  puzzle2x2-04.txt
  *  puzzle2x2-05.txt
  *  puzzle2x2-06.txt
==> passed

Test 12b: Call solution() with 2-by-2 file inputs
  *  puzzle2x2-00.txt
  *  puzzle2x2-01.txt
  *  puzzle2x2-02.txt
  *  puzzle2x2-03.txt
  *  puzzle2x2-04.txt
  *  puzzle2x2-05.txt
  *  puzzle2x2-06.txt
==> passed

Test 13a: Call moves() with 3-by-3 file inputs
  *  puzzle3x3-00.txt
  *  puzzle3x3-01.txt
  *  puzzle3x3-02.txt
  *  puzzle3x3-03.txt
  *  puzzle3x3-04.txt
  *  puzzle3x3-05.txt
  *  puzzle3x3-06.txt
  *  puzzle3x3-07.txt
  *  puzzle3x3-08.txt
  *  puzzle3x3-09.txt
  *  puzzle3x3-10.txt
     -  moves() returns wrong value
     -  student   moves() = 40
     -  reference moves() = 10
     -  board =
        3
         0  4  1 
         5  3  2 
         7  8  6 
  *  puzzle3x3-11.txt
     -  moves() returns wrong value
     -  student   moves() = 81
     -  reference moves() = 11
     -  board =
        3
         1  3  5 
         7  2  6 
         8  0  4 
  *  puzzle3x3-12.txt
  *  puzzle3x3-13.txt
     -  moves() returns wrong value
     -  student   moves() = 45
     -  reference moves() = 13
     -  board =
        3
         4  3  1 
         0  7  2 
         8  5  6 
  *  puzzle3x3-14.txt
     -  moves() returns wrong value
     -  student   moves() = 118
     -  reference moves() = 14
     -  board =
        3
         3  4  6 
         2  0  8 
         1  7  5 
  *  puzzle3x3-15.txt
     -  moves() returns wrong value
     -  student   moves() = 41
     -  reference moves() = 15
     -  board =
        3
         2  0  8 
         1  3  5 
         4  6  7 
  *  puzzle3x3-16.txt
  *  puzzle3x3-17.txt
     -  moves() returns wrong value
     -  student   moves() = 43
     -  reference moves() = 17
     -  board =
        3
         4  3  1 
         0  2  6 
         7  8  5 
  *  puzzle3x3-18.txt
     -  moves() returns wrong value
     -  student   moves() = 56
     -  reference moves() = 18
     -  board =
        3
         1  4  3 
         7  0  8 
         6  5  2 
  *  puzzle3x3-19.txt
  *  puzzle3x3-20.txt
     -  moves() returns wrong value
     -  student   moves() = 68
     -  reference moves() = 20
     -  board =
        3
         7  4  3 
         2  8  6 
         0  5  1 
  *  puzzle3x3-21.txt
     -  moves() returns wrong value
     -  student   moves() = 45
     -  reference moves() = 21
     -  board =
        3
         8  7  2 
         1  5  0 
         4  6  3 
  *  puzzle3x3-22.txt
     -  moves() returns wrong value
     -  student   moves() = 44
     -  reference moves() = 22
     -  board =
        3
         5  3  6 
         4  0  7 
         1  8  2 
  *  puzzle3x3-23.txt
     -  moves() returns wrong value
     -  student   moves() = 107
     -  reference moves() = 23
     -  board =
        3
         6  0  8 
         4  3  5 
         1  2  7 
  *  puzzle3x3-24.txt
     -  moves() returns wrong value
     -  student   moves() = 80
     -  reference moves() = 24
     -  board =
        3
         6  5  3 
         4  1  7 
         0  2  8 
  *  puzzle3x3-25.txt
     -  moves() returns wrong value
     -  student   moves() = 137
     -  reference moves() = 25
     -  board =
        3
         8  3  5 
         6  4  2 
         1  0  7 
  *  puzzle3x3-26.txt
     -  moves() returns wrong value
     -  student   moves() = 120
     -  reference moves() = 26
     -  board =
        3
         4  8  7 
         5  3  1 
         0  6  2 
  *  puzzle3x3-27.txt
     -  moves() returns wrong value
     -  student   moves() = 61
     -  reference moves() = 27
     -  board =
        3
         1  6  4 
         0  3  5 
         8  2  7 
  *  puzzle3x3-28.txt
     -  moves() returns wrong value
     -  student   moves() = 94
     -  reference moves() = 28
     -  board =
        3
         6  3  8 
         5  4  1 
         7  2  0 
  *  puzzle3x3-29.txt
     -  moves() returns wrong value
     -  student   moves() = 53
     -  reference moves() = 29
     -  board =
        3
         1  8  5 
         0  2  4 
         3  6  7 
  *  puzzle3x3-30.txt
     -  moves() returns wrong value
     -  student   moves() = 46
     -  reference moves() = 30
     -  board =
        3
         8  6  7 
         2  0  4 
         3  5  1 
==> FAILED

Test 13b: Call solution() with 3-by-3 file inputs
  *  puzzle3x3-00.txt
  *  puzzle3x3-01.txt
  *  puzzle3x3-02.txt
  *  puzzle3x3-03.txt
  *  puzzle3x3-04.txt
  *  puzzle3x3-05.txt
  *  puzzle3x3-06.txt
  *  puzzle3x3-07.txt
  *  puzzle3x3-08.txt
  *  puzzle3x3-09.txt
  *  puzzle3x3-10.txt
  *  puzzle3x3-11.txt
  *  puzzle3x3-12.txt
  *  puzzle3x3-13.txt
  *  puzzle3x3-14.txt
  *  puzzle3x3-15.txt
  *  puzzle3x3-16.txt
  *  puzzle3x3-17.txt
  *  puzzle3x3-18.txt
  *  puzzle3x3-19.txt
  *  puzzle3x3-20.txt
  *  puzzle3x3-21.txt
  *  puzzle3x3-22.txt
  *  puzzle3x3-23.txt
  *  puzzle3x3-24.txt
  *  puzzle3x3-25.txt
  *  puzzle3x3-26.txt
  *  puzzle3x3-27.txt
  *  puzzle3x3-28.txt
  *  puzzle3x3-29.txt
  *  puzzle3x3-30.txt
==> passed

Test 14a: Call moves() with 4-by-4 file inputs
  *  puzzle4x4-00.txt
  *  puzzle4x4-01.txt
  *  puzzle4x4-02.txt
  *  puzzle4x4-03.txt
  *  puzzle4x4-04.txt
  *  puzzle4x4-05.txt
  *  puzzle4x4-06.txt
  *  puzzle4x4-07.txt
  *  puzzle4x4-08.txt
  *  puzzle4x4-09.txt
  *  puzzle4x4-10.txt
     -  moves() returns wrong value
     -  student   moves() = 54
     -  reference moves() = 10
     -  board =
        4
         1  2  4 12 
         5  6  3  0 
         9 10  8  7 
        13 14 11 15 
  *  puzzle4x4-11.txt
  *  puzzle4x4-12.txt
  *  puzzle4x4-13.txt
  *  puzzle4x4-14.txt
     -  moves() returns wrong value
     -  student   moves() = 18
     -  reference moves() = 14
     -  board =
        4
         1  2  8  3 
         5 11  6  4 
         0 10  7 12 
         9 13 14 15 
  *  puzzle4x4-15.txt
     -  moves() returns wrong value
     -  student   moves() = 211
     -  reference moves() = 15
     -  board =
        4
         5  1  3  4 
        13  2  7  8 
         6 10 11 12 
        14  9  0 15 
  *  puzzle4x4-16.txt
  *  puzzle4x4-17.txt
     
     ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     OperationCountLimitExceededException
     Number of calls to methods in Board exceeds limit: 100000000
     ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 14b: Call solution() with 4-by-4 file inputs
  *  puzzle4x4-00.txt
  *  puzzle4x4-01.txt
  *  puzzle4x4-02.txt
  *  puzzle4x4-03.txt
  *  puzzle4x4-04.txt
  *  puzzle4x4-05.txt
  *  puzzle4x4-06.txt
  *  puzzle4x4-07.txt
  *  puzzle4x4-08.txt
  *  puzzle4x4-09.txt
  *  puzzle4x4-10.txt
  *  puzzle4x4-11.txt
  *  puzzle4x4-12.txt
  *  puzzle4x4-13.txt
  *  puzzle4x4-14.txt
  *  puzzle4x4-15.txt
  *  puzzle4x4-16.txt
  *  puzzle4x4-17.txt
     
     ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     OperationCountLimitExceededException
     Number of calls to methods in Board exceeds limit: 100000000
     ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 15: Call moves() with random solvable N-by-N boards
  *  100 random 2-by-2 boards
  *  200 random 3-by-3 boards that are <= 20 moves from goal
     -  moves() returns wrong value
     -  student   moves() = 21
     -  reference moves() = 15
     -  board =
        3
         1  0  2 
         5  4  3 
         8  7  6 
     -  failed on trial 1 of 200

  *  200 random 4-by-4 boards that are <= 20 moves from goal
     -  moves() returns wrong value
     -  student   moves() = 15
     -  reference moves() = 13
     -  board =
        4
         1  2  4  7 
         5  6  3  8 
         9 10 12 15 
         0 13 14 11 
     -  failed on trial 2 of 200

  *  200 random 5-by-5 boards that are <= 20 moves from goal
     
     ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
     OperationCountLimitExceededException
     Number of calls to methods in Board exceeds limit: 100000000
     ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

     -  failed on trial 1 of 200

==> FAILED


Total: 14/20 tests passed!


================================================================

******************************************************************************
*          MEMORY
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     4           248                  240
=> passed     8           568                  560
=> passed    12          1016                 1008
=> passed    16          1592                 1584
=> passed    20          2296                 2288
=> passed    36          6392                 6384
=> passed    72         23096                23088
=> passed   120         61496                61488
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



******************************************************************************
*          TIMING
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java.
Maximum time allowed per puzzle is 10 seconds.

               filename   N    seconds    insert()            delMin()         max PQ size
---------------------------------------------------------------------------------------------
=> passed  puzzle20.txt   3     0.02       1060                 608                 454         
=> passed  puzzle21.txt   3     0.00       1928                1118                 812         
=> passed  puzzle22.txt   3     0.02       7715                4670                3047         
=> passed  puzzle23.txt   3     0.00        518                 288                 232         
=> passed  puzzle24.txt   3     0.00        290                 164                 128         
=> passed  puzzle25.txt   3     0.01       3377                1982                1397         
=> passed  puzzle26.txt   3     0.00       1542                 902                 642         
=> passed  puzzle27.txt   3     0.00       1139                 654                 487         
=> passed  puzzle28.txt   3     0.00       1064                 614                 452         
=> passed  puzzle29.txt   3     0.00       1830                1084                 748         
=> passed  puzzle30.txt   3     0.00       1163                 668                 497         
=> passed  puzzle31.txt   3     0.00        500                 300                 202         

Total: 0/17 tests passed: Could not complete tests in allotted time, which results in a reported score of 0.
================================================================
